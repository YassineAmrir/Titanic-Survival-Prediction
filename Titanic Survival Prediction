{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":687897,"sourceType":"datasetVersion","datasetId":348873}],"dockerImageVersionId":30732,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Titanic Survival Prediction\n\n## Introduction\nThe sinking of the Titanic is one of the most infamous shipwrecks in history. On April 15, 1912, during her maiden voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew. This project aims to predict whether a passenger on the Titanic would have survived or not based on various features such as age, sex, class, and others.\n\n## Problem Statement\nGiven a set of features for passengers on the Titanic, our goal is to build a predictive model that can accurately classify whether a passenger survived or not. This is a binary classification problem where the target variable is `Survived`.\n\n## Objectives\n- Explore and analyze the Titanic dataset.\n- Preprocess the data to handle missing values, encode categorical variables, and scale features.\n- Build and evaluate multiple machine learning models.\n- Optimize the models to improve performance.\n\n## Dataset\nThe dataset consists of the following features:\n\n- `PassengerId`: Unique ID for each passenger.\n- `Survived`: Survival status (0 = No, 1 = Yes).\n- `Pclass`: Passenger class (1 = 1st, 2 = 2nd, 3 = 3rd).\n- `Name`: Name of the passenger.\n- `Sex`: Gender of the passenger.\n- `Age`: Age of the passenger.\n- `SibSp`: Number of siblings/spouses aboard the Titanic.\n- `Parch`: Number of parents/children aboard the Titanic.\n- `Ticket`: Ticket number.\n- `Fare`: Passenger fare.\n- `Cabin`: Cabin number (if available).\n- `Embarked`: Port of embarkation (C = Cherbourg, Q = Queenstown, S = Southampton).\n\n## Notebook Initialization\nWe will start by importing the necessary libraries and loading the dataset.\n","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:52.196739Z","iopub.execute_input":"2024-06-14T00:22:52.197112Z","iopub.status.idle":"2024-06-14T00:22:55.090336Z","shell.execute_reply.started":"2024-06-14T00:22:52.197084Z","shell.execute_reply":"2024-06-14T00:22:55.089266Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":"### Train Data:","metadata":{}},{"cell_type":"code","source":"train_data = pd.read_csv(r'/kaggle/input/titanic/train.csv')\n\ntrain_data.head()\n","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.091901Z","iopub.execute_input":"2024-06-14T00:22:55.092317Z","iopub.status.idle":"2024-06-14T00:22:55.143982Z","shell.execute_reply.started":"2024-06-14T00:22:55.092290Z","shell.execute_reply":"2024-06-14T00:22:55.142865Z"},"trusted":true},"execution_count":2,"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train_data.shape","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.149541Z","iopub.execute_input":"2024-06-14T00:22:55.149865Z","iopub.status.idle":"2024-06-14T00:22:55.159482Z","shell.execute_reply.started":"2024-06-14T00:22:55.149840Z","shell.execute_reply":"2024-06-14T00:22:55.158448Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"(891, 12)"},"metadata":{}}]},{"cell_type":"code","source":"train_data.info()","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.160880Z","iopub.execute_input":"2024-06-14T00:22:55.161237Z","iopub.status.idle":"2024-06-14T00:22:55.191823Z","shell.execute_reply.started":"2024-06-14T00:22:55.161204Z","shell.execute_reply":"2024-06-14T00:22:55.190660Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Name         891 non-null    object \n 4   Sex          891 non-null    object \n 5   Age          714 non-null    float64\n 6   SibSp        891 non-null    int64  \n 7   Parch        891 non-null    int64  \n 8   Ticket       891 non-null    object \n 9   Fare         891 non-null    float64\n 10  Cabin        204 non-null    object \n 11  Embarked     889 non-null    object \ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Test Data:","metadata":{}},{"cell_type":"code","source":"test_data = pd.read_csv(r'/kaggle/input/titanic/test.csv')\n\ntest_data.head()\n","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.193306Z","iopub.execute_input":"2024-06-14T00:22:55.193973Z","iopub.status.idle":"2024-06-14T00:22:55.221810Z","shell.execute_reply.started":"2024-06-14T00:22:55.193941Z","shell.execute_reply":"2024-06-14T00:22:55.220679Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Pclass                                          Name     Sex  \\\n0          892       3                              Kelly, Mr. James    male   \n1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n2          894       2                     Myles, Mr. Thomas Francis    male   \n3          895       3                              Wirz, Mr. Albert    male   \n4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n\n    Age  SibSp  Parch   Ticket     Fare Cabin Embarked  \n0  34.5      0      0   330911   7.8292   NaN        Q  \n1  47.0      1      0   363272   7.0000   NaN        S  \n2  62.0      0      0   240276   9.6875   NaN        Q  \n3  27.0      0      0   315154   8.6625   NaN        S  \n4  22.0      1      1  3101298  12.2875   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>3</td>\n      <td>Kelly, Mr. James</td>\n      <td>male</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330911</td>\n      <td>7.8292</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>3</td>\n      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n      <td>female</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>363272</td>\n      <td>7.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>2</td>\n      <td>Myles, Mr. Thomas Francis</td>\n      <td>male</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>240276</td>\n      <td>9.6875</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>3</td>\n      <td>Wirz, Mr. Albert</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>315154</td>\n      <td>8.6625</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>3</td>\n      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n      <td>female</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3101298</td>\n      <td>12.2875</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_data.shape","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.223216Z","iopub.execute_input":"2024-06-14T00:22:55.223659Z","iopub.status.idle":"2024-06-14T00:22:55.231102Z","shell.execute_reply.started":"2024-06-14T00:22:55.223621Z","shell.execute_reply":"2024-06-14T00:22:55.229834Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"(418, 11)"},"metadata":{}}]},{"cell_type":"code","source":"test_data.info()","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.232434Z","iopub.execute_input":"2024-06-14T00:22:55.233036Z","iopub.status.idle":"2024-06-14T00:22:55.251682Z","shell.execute_reply.started":"2024-06-14T00:22:55.232997Z","shell.execute_reply":"2024-06-14T00:22:55.250351Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 418 entries, 0 to 417\nData columns (total 11 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  418 non-null    int64  \n 1   Pclass       418 non-null    int64  \n 2   Name         418 non-null    object \n 3   Sex          418 non-null    object \n 4   Age          332 non-null    float64\n 5   SibSp        418 non-null    int64  \n 6   Parch        418 non-null    int64  \n 7   Ticket       418 non-null    object \n 8   Fare         417 non-null    float64\n 9   Cabin        91 non-null     object \n 10  Embarked     418 non-null    object \ndtypes: float64(2), int64(4), object(5)\nmemory usage: 36.0+ KB\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Checking for Missing Values\n\nIn this section, we will identify any missing values in the dataset. Missing values can affect the performance of machine learning models, so it's important to detect and handle them appropriately.\n\nWe will use the `isnull()` function combined with `sum()` to get the count of missing values for each column.\n","metadata":{}},{"cell_type":"code","source":"train_data.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.253549Z","iopub.execute_input":"2024-06-14T00:22:55.254007Z","iopub.status.idle":"2024-06-14T00:22:55.270374Z","shell.execute_reply.started":"2024-06-14T00:22:55.253972Z","shell.execute_reply":"2024-06-14T00:22:55.269046Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"PassengerId      0\nSurvived         0\nPclass           0\nName             0\nSex              0\nAge            177\nSibSp            0\nParch            0\nTicket           0\nFare             0\nCabin          687\nEmbarked         2\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"test_data.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.275238Z","iopub.execute_input":"2024-06-14T00:22:55.276130Z","iopub.status.idle":"2024-06-14T00:22:55.288860Z","shell.execute_reply.started":"2024-06-14T00:22:55.276077Z","shell.execute_reply":"2024-06-14T00:22:55.287527Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"PassengerId      0\nPclass           0\nName             0\nSex              0\nAge             86\nSibSp            0\nParch            0\nTicket           0\nFare             1\nCabin          327\nEmbarked         0\ndtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"## Handling Missing Values","metadata":{}},{"cell_type":"markdown","source":"### Age\nThe `Age` column has approximately 20% missing values in both the training and test datasets. We will impute these missing values using the median age of the passengers.","metadata":{}},{"cell_type":"code","source":"age_imputer = SimpleImputer(strategy='median')\ntrain_data['Age'] = age_imputer.fit_transform(train_data[['Age']])\ntest_data['Age'] = age_imputer.transform(test_data[['Age']])\n","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.290220Z","iopub.execute_input":"2024-06-14T00:22:55.290542Z","iopub.status.idle":"2024-06-14T00:22:55.313044Z","shell.execute_reply.started":"2024-06-14T00:22:55.290515Z","shell.execute_reply":"2024-06-14T00:22:55.311892Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"markdown","source":"### Cabin\nThe `Cabin` column has a high percentage of missing values (77% in the training set and 78% in the test set). Instead of imputing, we will create a new feature indicating whether the cabin number is known and drop the original `Cabin` column.","metadata":{}},{"cell_type":"code","source":"train_data['CabinKnown'] = train_data['Cabin'].notnull().astype(int)\ntest_data['CabinKnown'] = test_data['Cabin'].notnull().astype(int)\n\ntrain_data = train_data.drop(columns=['Cabin'])\ntest_data = test_data.drop(columns=['Cabin'])","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.314552Z","iopub.execute_input":"2024-06-14T00:22:55.314947Z","iopub.status.idle":"2024-06-14T00:22:55.331827Z","shell.execute_reply.started":"2024-06-14T00:22:55.314914Z","shell.execute_reply":"2024-06-14T00:22:55.330586Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"markdown","source":"### Embarked\nThe `Embarked` column has only 2 missing values in the training set. We will impute these missing values with the most frequent port of embarkation.\n","metadata":{}},{"cell_type":"code","source":"#Impute missing 'Embarked' values with the mode\nembarked_imputer = SimpleImputer(strategy='most_frequent')\ntrain_data['Embarked'] = embarked_imputer.fit_transform(train_data[['Embarked']]).ravel()","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.333277Z","iopub.execute_input":"2024-06-14T00:22:55.334187Z","iopub.status.idle":"2024-06-14T00:22:55.352816Z","shell.execute_reply.started":"2024-06-14T00:22:55.334150Z","shell.execute_reply":"2024-06-14T00:22:55.351840Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"markdown","source":"### Fare\nThe `Fare` column has 1 missing value in the test set. We will impute this missing value with the median fare.","metadata":{}},{"cell_type":"code","source":"fare_imputer = SimpleImputer(strategy='median')\ntest_data['Fare'] = fare_imputer.fit_transform(test_data[['Fare']])","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.354151Z","iopub.execute_input":"2024-06-14T00:22:55.354511Z","iopub.status.idle":"2024-06-14T00:22:55.374107Z","shell.execute_reply.started":"2024-06-14T00:22:55.354485Z","shell.execute_reply":"2024-06-14T00:22:55.372908Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"markdown","source":"## Checking for Missing Values\n\nBefore proceeding with data preprocessing and feature engineering, it is essential to understand the extent of missing data in the dataset.","metadata":{}},{"cell_type":"code","source":"print(train_data.isnull().sum())","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.375311Z","iopub.execute_input":"2024-06-14T00:22:55.375619Z","iopub.status.idle":"2024-06-14T00:22:55.392993Z","shell.execute_reply.started":"2024-06-14T00:22:55.375593Z","shell.execute_reply":"2024-06-14T00:22:55.391581Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"PassengerId    0\nSurvived       0\nPclass         0\nName           0\nSex            0\nAge            0\nSibSp          0\nParch          0\nTicket         0\nFare           0\nEmbarked       0\nCabinKnown     0\ndtype: int64\n","output_type":"stream"}]},{"cell_type":"code","source":"print(test_data.isnull().sum())","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.395186Z","iopub.execute_input":"2024-06-14T00:22:55.395595Z","iopub.status.idle":"2024-06-14T00:22:55.414073Z","shell.execute_reply.started":"2024-06-14T00:22:55.395564Z","shell.execute_reply":"2024-06-14T00:22:55.412036Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"PassengerId    0\nPclass         0\nName           0\nSex            0\nAge            0\nSibSp          0\nParch          0\nTicket         0\nFare           0\nEmbarked       0\nCabinKnown     0\ndtype: int64\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Feature Engineering\n\nFeature engineering involves transforming raw data into features that better represent the underlying problem to the predictive models, resulting in improved model performance.\n","metadata":{}},{"cell_type":"markdown","source":"### Extracting Titles from Names","metadata":{}},{"cell_type":"code","source":"train_test_dataset=[train_data,test_data]\nfor dataset in train_test_dataset:\n    dataset['Title']=dataset['Name'].str.extract('([A-Za-z]+)\\.',expand=False)","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.415907Z","iopub.execute_input":"2024-06-14T00:22:55.416317Z","iopub.status.idle":"2024-06-14T00:22:55.437388Z","shell.execute_reply.started":"2024-06-14T00:22:55.416281Z","shell.execute_reply":"2024-06-14T00:22:55.436229Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"train_data['Title'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.439249Z","iopub.execute_input":"2024-06-14T00:22:55.439842Z","iopub.status.idle":"2024-06-14T00:22:55.458433Z","shell.execute_reply.started":"2024-06-14T00:22:55.439805Z","shell.execute_reply":"2024-06-14T00:22:55.457113Z"},"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"Title\nMr          517\nMiss        182\nMrs         125\nMaster       40\nDr            7\nRev           6\nMlle          2\nMajor         2\nCol           2\nCountess      1\nCapt          1\nMs            1\nSir           1\nLady          1\nMme           1\nDon           1\nJonkheer      1\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"test_data['Title'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.460010Z","iopub.execute_input":"2024-06-14T00:22:55.460755Z","iopub.status.idle":"2024-06-14T00:22:55.479116Z","shell.execute_reply.started":"2024-06-14T00:22:55.460719Z","shell.execute_reply":"2024-06-14T00:22:55.477860Z"},"trusted":true},"execution_count":18,"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"Title\nMr        240\nMiss       78\nMrs        72\nMaster     21\nCol         2\nRev         2\nMs          1\nDr          1\nDona        1\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"### Mapping Titles to Numerical Values","metadata":{}},{"cell_type":"code","source":"title_mapping={\"Mr\":0,\"Miss\":1,\"Mrs\":2,\"Master\":3,\"Dr\": 3, \"Rev\": 3, \"Col\": 3, \"Major\": 3, \"Mlle\": 3,\"Countess\": 3,\n                 \"Ms\": 3, \"Lady\": 3, \"Jonkheer\": 3, \"Don\": 3, \"Dona\" : 3, \"Mme\": 3,\"Capt\": 3,\"Sir\": 3 }\nfor data in train_test_dataset:\n    data['Title']=data['Title'].map(title_mapping)","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.480680Z","iopub.execute_input":"2024-06-14T00:22:55.481093Z","iopub.status.idle":"2024-06-14T00:22:55.492190Z","shell.execute_reply.started":"2024-06-14T00:22:55.481060Z","shell.execute_reply":"2024-06-14T00:22:55.491180Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"train_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.493429Z","iopub.execute_input":"2024-06-14T00:22:55.494015Z","iopub.status.idle":"2024-06-14T00:22:55.523883Z","shell.execute_reply.started":"2024-06-14T00:22:55.493987Z","shell.execute_reply":"2024-06-14T00:22:55.522480Z"},"trusted":true},"execution_count":20,"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Embarked  CabinKnown  Title  \n0      0         A/5 21171   7.2500        S           0      0  \n1      0          PC 17599  71.2833        C           1      2  \n2      0  STON/O2. 3101282   7.9250        S           0      1  \n3      0            113803  53.1000        S           1      2  \n4      0            373450   8.0500        S           0      0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>CabinKnown</th>\n      <th>Title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>S</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>S</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>S</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>S</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.526010Z","iopub.execute_input":"2024-06-14T00:22:55.526409Z","iopub.status.idle":"2024-06-14T00:22:55.548844Z","shell.execute_reply.started":"2024-06-14T00:22:55.526376Z","shell.execute_reply":"2024-06-14T00:22:55.547620Z"},"trusted":true},"execution_count":21,"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Pclass                                          Name     Sex  \\\n0          892       3                              Kelly, Mr. James    male   \n1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n2          894       2                     Myles, Mr. Thomas Francis    male   \n3          895       3                              Wirz, Mr. Albert    male   \n4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n\n    Age  SibSp  Parch   Ticket     Fare Embarked  CabinKnown  Title  \n0  34.5      0      0   330911   7.8292        Q           0      0  \n1  47.0      1      0   363272   7.0000        S           0      2  \n2  62.0      0      0   240276   9.6875        Q           0      0  \n3  27.0      0      0   315154   8.6625        S           0      0  \n4  22.0      1      1  3101298  12.2875        S           0      2  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>CabinKnown</th>\n      <th>Title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>3</td>\n      <td>Kelly, Mr. James</td>\n      <td>male</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330911</td>\n      <td>7.8292</td>\n      <td>Q</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>3</td>\n      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n      <td>female</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>363272</td>\n      <td>7.0000</td>\n      <td>S</td>\n      <td>0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>2</td>\n      <td>Myles, Mr. Thomas Francis</td>\n      <td>male</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>240276</td>\n      <td>9.6875</td>\n      <td>Q</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>3</td>\n      <td>Wirz, Mr. Albert</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>315154</td>\n      <td>8.6625</td>\n      <td>S</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>3</td>\n      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n      <td>female</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3101298</td>\n      <td>12.2875</td>\n      <td>S</td>\n      <td>0</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### Dropping the Original Name Column","metadata":{}},{"cell_type":"code","source":"train_data.drop('Name',axis=1,inplace=True)\ntest_data.drop('Name',axis=1,inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.550594Z","iopub.execute_input":"2024-06-14T00:22:55.550994Z","iopub.status.idle":"2024-06-14T00:22:55.559442Z","shell.execute_reply.started":"2024-06-14T00:22:55.550959Z","shell.execute_reply":"2024-06-14T00:22:55.558010Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"train_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.561113Z","iopub.execute_input":"2024-06-14T00:22:55.561536Z","iopub.status.idle":"2024-06-14T00:22:55.580593Z","shell.execute_reply.started":"2024-06-14T00:22:55.561500Z","shell.execute_reply":"2024-06-14T00:22:55.579255Z"},"trusted":true},"execution_count":23,"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass     Sex   Age  SibSp  Parch  \\\n0            1         0       3    male  22.0      1      0   \n1            2         1       1  female  38.0      1      0   \n2            3         1       3  female  26.0      0      0   \n3            4         1       1  female  35.0      1      0   \n4            5         0       3    male  35.0      0      0   \n\n             Ticket     Fare Embarked  CabinKnown  Title  \n0         A/5 21171   7.2500        S           0      0  \n1          PC 17599  71.2833        C           1      2  \n2  STON/O2. 3101282   7.9250        S           0      1  \n3            113803  53.1000        S           1      2  \n4            373450   8.0500        S           0      0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>CabinKnown</th>\n      <th>Title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>S</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>S</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>S</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>S</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### Mapping Sex to Numerical Values","metadata":{}},{"cell_type":"code","source":"Sexe_mapping={\"male\":0,\"female\":1}\nfor data in train_test_dataset:\n    data['Sex']=data['Sex'].map(Sexe_mapping)","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.582743Z","iopub.execute_input":"2024-06-14T00:22:55.583185Z","iopub.status.idle":"2024-06-14T00:22:55.592482Z","shell.execute_reply.started":"2024-06-14T00:22:55.583150Z","shell.execute_reply":"2024-06-14T00:22:55.591409Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"train_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.594490Z","iopub.execute_input":"2024-06-14T00:22:55.594905Z","iopub.status.idle":"2024-06-14T00:22:55.615030Z","shell.execute_reply.started":"2024-06-14T00:22:55.594869Z","shell.execute_reply":"2024-06-14T00:22:55.613671Z"},"trusted":true},"execution_count":25,"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  Sex   Age  SibSp  Parch            Ticket  \\\n0            1         0       3    0  22.0      1      0         A/5 21171   \n1            2         1       1    1  38.0      1      0          PC 17599   \n2            3         1       3    1  26.0      0      0  STON/O2. 3101282   \n3            4         1       1    1  35.0      1      0            113803   \n4            5         0       3    0  35.0      0      0            373450   \n\n      Fare Embarked  CabinKnown  Title  \n0   7.2500        S           0      0  \n1  71.2833        C           1      2  \n2   7.9250        S           0      1  \n3  53.1000        S           1      2  \n4   8.0500        S           0      0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>CabinKnown</th>\n      <th>Title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>S</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>S</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>S</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>S</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### Mapping Age to Numerical Values","metadata":{}},{"cell_type":"code","source":"for dataset in train_test_dataset:\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 26), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 26) & (dataset['Age'] <= 36), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 36) & (dataset['Age'] <= 62), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 62, 'Age'] = 4","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.616728Z","iopub.execute_input":"2024-06-14T00:22:55.617063Z","iopub.status.idle":"2024-06-14T00:22:55.632181Z","shell.execute_reply.started":"2024-06-14T00:22:55.617037Z","shell.execute_reply":"2024-06-14T00:22:55.630447Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"train_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.638249Z","iopub.execute_input":"2024-06-14T00:22:55.638616Z","iopub.status.idle":"2024-06-14T00:22:55.653899Z","shell.execute_reply.started":"2024-06-14T00:22:55.638587Z","shell.execute_reply":"2024-06-14T00:22:55.652899Z"},"trusted":true},"execution_count":27,"outputs":[{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  Sex  Age  SibSp  Parch            Ticket  \\\n0            1         0       3    0  1.0      1      0         A/5 21171   \n1            2         1       1    1  3.0      1      0          PC 17599   \n2            3         1       3    1  1.0      0      0  STON/O2. 3101282   \n3            4         1       1    1  2.0      1      0            113803   \n4            5         0       3    0  2.0      0      0            373450   \n\n      Fare Embarked  CabinKnown  Title  \n0   7.2500        S           0      0  \n1  71.2833        C           1      2  \n2   7.9250        S           0      1  \n3  53.1000        S           1      2  \n4   8.0500        S           0      0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>CabinKnown</th>\n      <th>Title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>S</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>S</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>S</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>S</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### Mapping Embarked to Numerical Values","metadata":{}},{"cell_type":"code","source":"embarked_mapping = {\"S\": 0, \"C\": 1, \"Q\": 2}\nfor dataset in train_test_dataset:\n    dataset['Embarked'] = dataset['Embarked'].map(embarked_mapping)","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.655140Z","iopub.execute_input":"2024-06-14T00:22:55.655445Z","iopub.status.idle":"2024-06-14T00:22:55.671739Z","shell.execute_reply.started":"2024-06-14T00:22:55.655420Z","shell.execute_reply":"2024-06-14T00:22:55.670536Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"train_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.673174Z","iopub.execute_input":"2024-06-14T00:22:55.673592Z","iopub.status.idle":"2024-06-14T00:22:55.696989Z","shell.execute_reply.started":"2024-06-14T00:22:55.673558Z","shell.execute_reply":"2024-06-14T00:22:55.695702Z"},"trusted":true},"execution_count":29,"outputs":[{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  Sex  Age  SibSp  Parch            Ticket  \\\n0            1         0       3    0  1.0      1      0         A/5 21171   \n1            2         1       1    1  3.0      1      0          PC 17599   \n2            3         1       3    1  1.0      0      0  STON/O2. 3101282   \n3            4         1       1    1  2.0      1      0            113803   \n4            5         0       3    0  2.0      0      0            373450   \n\n      Fare  Embarked  CabinKnown  Title  \n0   7.2500         0           0      0  \n1  71.2833         1           1      2  \n2   7.9250         0           0      1  \n3  53.1000         0           1      2  \n4   8.0500         0           0      0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>CabinKnown</th>\n      <th>Title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### Mapping Fare to Numerical Values","metadata":{}},{"cell_type":"code","source":"for dataset in train_test_dataset:\n    dataset.loc[ dataset['Fare'] <= 17, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 17) & (dataset['Fare'] <= 30), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 30) & (dataset['Fare'] <= 100), 'Fare'] = 2\n    dataset.loc[ dataset['Fare'] > 100, 'Fare'] = 3","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.698293Z","iopub.execute_input":"2024-06-14T00:22:55.698832Z","iopub.status.idle":"2024-06-14T00:22:55.713624Z","shell.execute_reply.started":"2024-06-14T00:22:55.698791Z","shell.execute_reply":"2024-06-14T00:22:55.712589Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"train_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.715020Z","iopub.execute_input":"2024-06-14T00:22:55.716063Z","iopub.status.idle":"2024-06-14T00:22:55.732363Z","shell.execute_reply.started":"2024-06-14T00:22:55.716027Z","shell.execute_reply":"2024-06-14T00:22:55.731341Z"},"trusted":true},"execution_count":31,"outputs":[{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  Sex  Age  SibSp  Parch            Ticket  \\\n0            1         0       3    0  1.0      1      0         A/5 21171   \n1            2         1       1    1  3.0      1      0          PC 17599   \n2            3         1       3    1  1.0      0      0  STON/O2. 3101282   \n3            4         1       1    1  2.0      1      0            113803   \n4            5         0       3    0  2.0      0      0            373450   \n\n   Fare  Embarked  CabinKnown  Title  \n0   0.0         0           0      0  \n1   2.0         1           1      2  \n2   0.0         0           0      1  \n3   2.0         0           1      2  \n4   0.0         0           0      0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>CabinKnown</th>\n      <th>Title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>2.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### Mapping FamilySize to Numerical Values","metadata":{}},{"cell_type":"code","source":"train_data[\"FamilySize\"] = train_data[\"SibSp\"] + train_data[\"Parch\"] + 1\ntest_data[\"FamilySize\"] = test_data[\"SibSp\"] + test_data[\"Parch\"] + 1","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.733481Z","iopub.execute_input":"2024-06-14T00:22:55.733824Z","iopub.status.idle":"2024-06-14T00:22:55.744995Z","shell.execute_reply.started":"2024-06-14T00:22:55.733790Z","shell.execute_reply":"2024-06-14T00:22:55.743917Z"},"trusted":true},"execution_count":32,"outputs":[]},{"cell_type":"code","source":"family_mapping = {1: 0, 2: 0.4, 3: 0.8, 4: 1.2, 5: 1.6, 6: 2, 7: 2.4, 8: 2.8, 9: 3.2, 10: 3.6, 11: 4}\nfor dataset in train_test_dataset:\n    dataset['FamilySize'] = dataset['FamilySize'].map(family_mapping)","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.746484Z","iopub.execute_input":"2024-06-14T00:22:55.746853Z","iopub.status.idle":"2024-06-14T00:22:55.759426Z","shell.execute_reply.started":"2024-06-14T00:22:55.746827Z","shell.execute_reply":"2024-06-14T00:22:55.758367Z"},"trusted":true},"execution_count":33,"outputs":[]},{"cell_type":"code","source":"train_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.760869Z","iopub.execute_input":"2024-06-14T00:22:55.761322Z","iopub.status.idle":"2024-06-14T00:22:55.780709Z","shell.execute_reply.started":"2024-06-14T00:22:55.761295Z","shell.execute_reply":"2024-06-14T00:22:55.778920Z"},"trusted":true},"execution_count":34,"outputs":[{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  Sex  Age  SibSp  Parch            Ticket  \\\n0            1         0       3    0  1.0      1      0         A/5 21171   \n1            2         1       1    1  3.0      1      0          PC 17599   \n2            3         1       3    1  1.0      0      0  STON/O2. 3101282   \n3            4         1       1    1  2.0      1      0            113803   \n4            5         0       3    0  2.0      0      0            373450   \n\n   Fare  Embarked  CabinKnown  Title  FamilySize  \n0   0.0         0           0      0         0.4  \n1   2.0         1           1      2         0.4  \n2   0.0         0           0      1         0.0  \n3   2.0         0           1      2         0.4  \n4   0.0         0           0      0         0.0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>CabinKnown</th>\n      <th>Title</th>\n      <th>FamilySize</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.4</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>2.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0.4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0.4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### Dropping Unnecessary Columns","metadata":{}},{"cell_type":"code","source":"features_drop = ['Ticket', 'SibSp', 'Parch']\ntrain = train_data.drop(features_drop, axis=1)\ntest = test_data.drop(features_drop, axis=1)\ntrain = train.drop(['PassengerId'], axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.782088Z","iopub.execute_input":"2024-06-14T00:22:55.782853Z","iopub.status.idle":"2024-06-14T00:22:55.793272Z","shell.execute_reply.started":"2024-06-14T00:22:55.782816Z","shell.execute_reply":"2024-06-14T00:22:55.792139Z"},"trusted":true},"execution_count":35,"outputs":[]},{"cell_type":"markdown","source":"### Separating Features and Target Variable","metadata":{}},{"cell_type":"code","source":"train_data = train.drop('Survived', axis=1)\ntarget = train['Survived']\n\ntrain_data.shape, target.shape","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.794978Z","iopub.execute_input":"2024-06-14T00:22:55.795392Z","iopub.status.idle":"2024-06-14T00:22:55.810900Z","shell.execute_reply.started":"2024-06-14T00:22:55.795354Z","shell.execute_reply":"2024-06-14T00:22:55.809826Z"},"trusted":true},"execution_count":36,"outputs":[{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"((891, 8), (891,))"},"metadata":{}}]},{"cell_type":"code","source":"train_data.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.812477Z","iopub.execute_input":"2024-06-14T00:22:55.812893Z","iopub.status.idle":"2024-06-14T00:22:55.831911Z","shell.execute_reply.started":"2024-06-14T00:22:55.812857Z","shell.execute_reply":"2024-06-14T00:22:55.830548Z"},"trusted":true},"execution_count":37,"outputs":[{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"   Pclass  Sex  Age  Fare  Embarked  CabinKnown  Title  FamilySize\n0       3    0  1.0   0.0         0           0      0         0.4\n1       1    1  3.0   2.0         1           1      2         0.4\n2       3    1  1.0   0.0         0           0      1         0.0\n3       1    1  2.0   2.0         0           1      2         0.4\n4       3    0  2.0   0.0         0           0      0         0.0\n5       3    0  2.0   0.0         2           0      0         0.0\n6       1    0  3.0   2.0         0           1      0         0.0\n7       3    0  0.0   1.0         0           0      3         1.6\n8       3    1  2.0   0.0         0           0      2         0.8\n9       2    1  0.0   2.0         1           0      2         0.4","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>CabinKnown</th>\n      <th>Title</th>\n      <th>FamilySize</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.4</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0.4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0.4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>3</td>\n      <td>0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>3</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1.6</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>3</td>\n      <td>1</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0.8</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>2</td>\n      <td>1</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0.4</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.833945Z","iopub.execute_input":"2024-06-14T00:22:55.834391Z","iopub.status.idle":"2024-06-14T00:22:55.851852Z","shell.execute_reply.started":"2024-06-14T00:22:55.834355Z","shell.execute_reply":"2024-06-14T00:22:55.850814Z"},"trusted":true},"execution_count":38,"outputs":[{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"   Survived  Pclass  Sex  Age  Fare  Embarked  CabinKnown  Title  FamilySize\n0         0       3    0  1.0   0.0         0           0      0         0.4\n1         1       1    1  3.0   2.0         1           1      2         0.4\n2         1       3    1  1.0   0.0         0           0      1         0.0\n3         1       1    1  2.0   2.0         0           1      2         0.4\n4         0       3    0  2.0   0.0         0           0      0         0.0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>CabinKnown</th>\n      <th>Title</th>\n      <th>FamilySize</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.4</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0.4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0.4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.853250Z","iopub.execute_input":"2024-06-14T00:22:55.853626Z","iopub.status.idle":"2024-06-14T00:22:55.869925Z","shell.execute_reply.started":"2024-06-14T00:22:55.853594Z","shell.execute_reply":"2024-06-14T00:22:55.868662Z"},"trusted":true},"execution_count":39,"outputs":[{"execution_count":39,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Pclass  Sex  Age  Fare  Embarked  CabinKnown  Title  \\\n0          892       3    0  2.0   0.0         2           0      0   \n1          893       3    1  3.0   0.0         0           0      2   \n2          894       2    0  3.0   0.0         2           0      0   \n3          895       3    0  2.0   0.0         0           0      0   \n4          896       3    1  1.0   0.0         0           0      2   \n\n   FamilySize  \n0         0.0  \n1         0.4  \n2         0.0  \n3         0.0  \n4         0.8  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>CabinKnown</th>\n      <th>Title</th>\n      <th>FamilySize</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0.4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>2</td>\n      <td>0</td>\n      <td>3.0</td>\n      <td>0.0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0.8</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.871406Z","iopub.execute_input":"2024-06-14T00:22:55.871732Z","iopub.status.idle":"2024-06-14T00:22:55.888532Z","shell.execute_reply.started":"2024-06-14T00:22:55.871700Z","shell.execute_reply":"2024-06-14T00:22:55.887311Z"},"trusted":true},"execution_count":40,"outputs":[{"execution_count":40,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Pclass  Sex  Age  SibSp  Parch   Ticket  Fare  Embarked  \\\n0          892       3    0  2.0      0      0   330911   0.0         2   \n1          893       3    1  3.0      1      0   363272   0.0         0   \n2          894       2    0  3.0      0      0   240276   0.0         2   \n3          895       3    0  2.0      0      0   315154   0.0         0   \n4          896       3    1  1.0      1      1  3101298   0.0         0   \n\n   CabinKnown  Title  FamilySize  \n0           0      0         0.0  \n1           0      2         0.4  \n2           0      0         0.0  \n3           0      0         0.0  \n4           0      2         0.8  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Embarked</th>\n      <th>CabinKnown</th>\n      <th>Title</th>\n      <th>FamilySize</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330911</td>\n      <td>0.0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>3</td>\n      <td>1</td>\n      <td>3.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>363272</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0.4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>2</td>\n      <td>0</td>\n      <td>3.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>240276</td>\n      <td>0.0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>315154</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3101298</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0.8</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"## Modeling\n\nIn this section, we will train a machine learning model to predict survival on the Titanic.","metadata":{}},{"cell_type":"markdown","source":"### K-Fold Cross-Validation Setup\n\nTo evaluate the performance of our model more robustly, we will use k-fold cross-validation.","metadata":{}},{"cell_type":"code","source":"k_fold = KFold(n_splits=10, shuffle=True, random_state=0)","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.890057Z","iopub.execute_input":"2024-06-14T00:22:55.890455Z","iopub.status.idle":"2024-06-14T00:22:55.897531Z","shell.execute_reply.started":"2024-06-14T00:22:55.890420Z","shell.execute_reply":"2024-06-14T00:22:55.896336Z"},"trusted":true},"execution_count":41,"outputs":[]},{"cell_type":"markdown","source":"### Training and Evaluating a K-Nearest Neighbors (KNN) Classifier\n\nIn this section, we will train a K-Nearest Neighbors (KNN) classifier","metadata":{}},{"cell_type":"code","source":"clf = KNeighborsClassifier(n_neighbors = 13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:55.899593Z","iopub.execute_input":"2024-06-14T00:22:55.900324Z","iopub.status.idle":"2024-06-14T00:22:56.050781Z","shell.execute_reply.started":"2024-06-14T00:22:55.900285Z","shell.execute_reply":"2024-06-14T00:22:56.049500Z"},"trusted":true},"execution_count":42,"outputs":[{"name":"stdout","text":"[0.82222222 0.78651685 0.80898876 0.83146067 0.84269663 0.80898876\n 0.84269663 0.78651685 0.82022472 0.82022472]\n","output_type":"stream"}]},{"cell_type":"code","source":"round(np.mean(score)*100, 2)","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:56.052502Z","iopub.execute_input":"2024-06-14T00:22:56.053174Z","iopub.status.idle":"2024-06-14T00:22:56.060711Z","shell.execute_reply.started":"2024-06-14T00:22:56.053137Z","shell.execute_reply":"2024-06-14T00:22:56.059445Z"},"trusted":true},"execution_count":43,"outputs":[{"execution_count":43,"output_type":"execute_result","data":{"text/plain":"81.71"},"metadata":{}}]},{"cell_type":"markdown","source":"### Training and Evaluating a Decision Tree Classifier\n\nIn this section, we will train a Decision Tree Classifier","metadata":{}},{"cell_type":"code","source":"clf = DecisionTreeClassifier()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:56.062685Z","iopub.execute_input":"2024-06-14T00:22:56.063107Z","iopub.status.idle":"2024-06-14T00:22:56.138971Z","shell.execute_reply.started":"2024-06-14T00:22:56.063070Z","shell.execute_reply":"2024-06-14T00:22:56.137829Z"},"trusted":true},"execution_count":44,"outputs":[{"name":"stdout","text":"[0.78888889 0.80898876 0.7752809  0.74157303 0.86516854 0.7752809\n 0.87640449 0.80898876 0.75280899 0.79775281]\n","output_type":"stream"}]},{"cell_type":"code","source":"round(np.mean(score)*100, 2)","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:56.140982Z","iopub.execute_input":"2024-06-14T00:22:56.141380Z","iopub.status.idle":"2024-06-14T00:22:56.149007Z","shell.execute_reply.started":"2024-06-14T00:22:56.141335Z","shell.execute_reply":"2024-06-14T00:22:56.147598Z"},"trusted":true},"execution_count":45,"outputs":[{"execution_count":45,"output_type":"execute_result","data":{"text/plain":"79.91"},"metadata":{}}]},{"cell_type":"markdown","source":"### Training and Evaluating a Random Forest Classifier\n\nIn this section, we will train a Random Forest Classifier","metadata":{}},{"cell_type":"code","source":"clf = RandomForestClassifier(n_estimators=13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:56.150883Z","iopub.execute_input":"2024-06-14T00:22:56.151581Z","iopub.status.idle":"2024-06-14T00:22:56.539395Z","shell.execute_reply.started":"2024-06-14T00:22:56.151543Z","shell.execute_reply":"2024-06-14T00:22:56.538051Z"},"trusted":true},"execution_count":46,"outputs":[{"name":"stdout","text":"[0.82222222 0.82022472 0.7752809  0.78651685 0.84269663 0.78651685\n 0.80898876 0.79775281 0.75280899 0.80898876]\n","output_type":"stream"}]},{"cell_type":"code","source":"round(np.mean(score)*100, 2)","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:56.541248Z","iopub.execute_input":"2024-06-14T00:22:56.542007Z","iopub.status.idle":"2024-06-14T00:22:56.549355Z","shell.execute_reply.started":"2024-06-14T00:22:56.541968Z","shell.execute_reply":"2024-06-14T00:22:56.548111Z"},"trusted":true},"execution_count":47,"outputs":[{"execution_count":47,"output_type":"execute_result","data":{"text/plain":"80.02"},"metadata":{}}]},{"cell_type":"markdown","source":"## Training and Evaluating a Support Vector Classifier (SVC)\n\nIn this section, we will train a Support Vector Classifier (SVC)","metadata":{}},{"cell_type":"code","source":"clf = SVC()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:56.550981Z","iopub.execute_input":"2024-06-14T00:22:56.551334Z","iopub.status.idle":"2024-06-14T00:22:56.814881Z","shell.execute_reply.started":"2024-06-14T00:22:56.551300Z","shell.execute_reply":"2024-06-14T00:22:56.813667Z"},"trusted":true},"execution_count":48,"outputs":[{"name":"stdout","text":"[0.83333333 0.80898876 0.80898876 0.82022472 0.84269663 0.80898876\n 0.84269663 0.85393258 0.83146067 0.84269663]\n","output_type":"stream"}]},{"cell_type":"code","source":"round(np.mean(score)*100,2)","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:56.816380Z","iopub.execute_input":"2024-06-14T00:22:56.816808Z","iopub.status.idle":"2024-06-14T00:22:56.824239Z","shell.execute_reply.started":"2024-06-14T00:22:56.816744Z","shell.execute_reply":"2024-06-14T00:22:56.823187Z"},"trusted":true},"execution_count":49,"outputs":[{"execution_count":49,"output_type":"execute_result","data":{"text/plain":"82.94"},"metadata":{}}]},{"cell_type":"markdown","source":"After training and evaluating several machine learning models, the Support Vector Classifier **(SVC)** has demonstrated superior performance based on accuracy scores from k-fold cross-validation.","metadata":{}},{"cell_type":"markdown","source":"### Making Predictions","metadata":{}},{"cell_type":"code","source":"clf = SVC()\nclf.fit(train_data, target)\n\ntest_data = test.drop(\"PassengerId\", axis=1).copy()\nprediction = clf.predict(test_data)","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:56.825640Z","iopub.execute_input":"2024-06-14T00:22:56.826761Z","iopub.status.idle":"2024-06-14T00:22:56.888656Z","shell.execute_reply.started":"2024-06-14T00:22:56.826726Z","shell.execute_reply":"2024-06-14T00:22:56.887554Z"},"trusted":true},"execution_count":50,"outputs":[]},{"cell_type":"code","source":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": prediction\n    })\n\nsubmission.to_csv('submission.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:56.890088Z","iopub.execute_input":"2024-06-14T00:22:56.890522Z","iopub.status.idle":"2024-06-14T00:22:56.900563Z","shell.execute_reply.started":"2024-06-14T00:22:56.890486Z","shell.execute_reply":"2024-06-14T00:22:56.898847Z"},"trusted":true},"execution_count":51,"outputs":[]},{"cell_type":"code","source":"submission = pd.read_csv('submission.csv')\nsubmission.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:56.902181Z","iopub.execute_input":"2024-06-14T00:22:56.902547Z","iopub.status.idle":"2024-06-14T00:22:56.916039Z","shell.execute_reply.started":"2024-06-14T00:22:56.902519Z","shell.execute_reply":"2024-06-14T00:22:56.914969Z"},"trusted":true},"execution_count":52,"outputs":[{"execution_count":52,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived\n0          892         0\n1          893         1\n2          894         0\n3          895         0\n4          896         1","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"cm = confusion_matrix(target, clf.predict(train_data))\n\nplt.figure(figsize=(8, 6))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False,\n            xticklabels=['Not Survived', 'Survived'],\n            yticklabels=['Not Survived', 'Survived'])\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.title('Confusion Matrix')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-14T00:22:56.917186Z","iopub.execute_input":"2024-06-14T00:22:56.917501Z","iopub.status.idle":"2024-06-14T00:22:57.144070Z","shell.execute_reply.started":"2024-06-14T00:22:56.917476Z","shell.execute_reply":"2024-06-14T00:22:57.140897Z"},"trusted":true},"execution_count":53,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":""},"metadata":{}}]}]}